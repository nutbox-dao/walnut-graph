# Walnut summary data
type Walnut @entity {
    id: ID!
    # walnut TVL
    tvl: BigInt!
    # all staked assets
    stakeAssets: [Bytes!]!
    # all community tokens
    cTokens: [Bytes!]!
    # total revenue
    revenue: BigInt!
    # fee history
    feeHistory: [FeeHistory!]!
    # propriation history
    propriationHistory: [AppropriationHistory!]!
    # all created communities
    communities: [Community!]!  # How to query this fields length
    # all communities counts
    totalCommunities: Int!
    # all users counts
    totalUsers: Int!
    # all pools counts
    totalPools: Int!
    # all gauge counts
    totalGauges: Int!
}

type FeeHistory @entity {
    id: ID!
    timestamp: BigInt!
    feeType: String!
    community: Community!
    pool: Pool!
    payer: User!
    amount: BigInt!
}

type AppropriationHistory @entity {
    id: ID!
    timestamp: BigInt!
    recipient: Bytes!
    amount: BigInt!
    tx: Bytes!
}

# Community info
type Community @entity {
    id: ID!
    createdAt: BigInt!
    # owner of community
    owner: User!
    # dao fund address
    daoFund: Bytes!
    # community dao fund
    feeRatio: Int!
    # cToken address
    cToken: Bytes!
    # treasury address
    treasury: Bytes!
    # total distributed ctoken amount
    distributedCToken: BigInt!
    # total dao fund
    revenue: BigInt!
    # retainedRevenue
    retainedRevenue: BigInt!
    # all members
    users: [User!]!
    # all pool info
    pools: [Pool!]!
    # total users count
    usersCount: Int!
    # total pools count
    poolsCount: Int!
    # actived pool count
    activedPoolCount: Int!
    # all community admin operate history
    operationHistory: [UserOperationHistory!]!
    # all operate count include all user staking history within community
    operationCount: Int!
}

type Pool @entity {
    id: ID!
    # pool index in activedPools
    poolIndex: Int!
    createdAt: BigInt!
    status: PoolStatus!
    # pool name
    name: String!
    # pool factory contract
    poolFactory: Bytes!
    # belong to community
    community: Community!
    # pool ratio
    ratio: Int!
    # staked asset  address ，delegatee, cosmos delgatee
    asset: Bytes!
    # foreign chain id steem：1  hive：2 cosmos: 3
    chainId: Int
    # totalStakedAmount
    totalAmount: BigInt!
    # optional
    tvl: BigInt
    # all staker list
    stakers: [User!]!
    # all user count
    stakersCount: Int!
    # gauge
    # 0: not create gauge; 1: create gauge
    hasCreateGauge: Int!
    # all voter list
    voters: [User!]!
    # all voter count
    votersCount: Int!
    # total voted amount
    votedAmount: BigInt!
}

enum PoolStatus {
    OPENED
    CLOSED
}

type User @entity {
    id: ID!
    createdAt: BigInt!
    address: Bytes!
    inCommunities: [Community!]!
    inPools: [Pool!]!
    inGauges: [Pool!]!
    # all user's operate history
    operationHistory: [UserOperationHistory!]!
    # total operation counts
    operationCount: Int!
}

enum UserOpertationHistoryType {
    DEPOSIT
    WITHDRAW
    HARVEST
    HARVESTALL
    VOTE
    UNVOTE
    WITHDRAWGAUGECTOKEN
    WITHDRAWGAUGENUT
    REDEEMFROMTREASURY
    ADMINCREATE
    ADMINSETFEE
    ADMINADDPOOL
    ADMINCLOSEPOOL
    ADMINSETRATIO
    ADMINSETDAOFUND
    ADMINWITHDRAWNREVENUE
    ADMINCREATENEWGAUGE
    ADMINWITHDRAWGAUGENUT
    ADMINCREATETREASURY
}

type UserOperationHistory @entity {
    id: ID!
    type: UserOpertationHistoryType!
    community: Community!
    # pool factory contract
    poolFactory: Bytes
    # pool: withdraw all pools if this field is null
    pool: Pool
    # user address
    user: Bytes!
    # foreign chain id: steem:1, hive:2
    chainId: Int
    # DEPOSIT/WITHDRAW: stake asset
    # HARVEST/HARVESTALL: community token
    # if this is from steem/hive delegate, it will be delegatee
    # if revenue withdrawn, asset mean dao fund address
    asset: Bytes
    # operated asset amount
    amount: BigInt
    # opertate time
    timestamp: BigInt!
    # transaction hash
    tx: Bytes!
}